
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001570  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001660  08001660  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001660  08001660  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001660  08001660  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001660  08001660  00011660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001664  08001664  00011664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000010  08001678  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08001678  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003370  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011af  00000000  00000000  000233a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000400  00000000  00000000  00024558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000338  00000000  00000000  00024958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ef4d  00000000  00000000  00024c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e71  00000000  00000000  00033bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005841e  00000000  00000000  00039a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00091e6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b5c  00000000  00000000  00091ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001618 	.word	0x08001618

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08001618 	.word	0x08001618

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <EXTI4_15_IRQHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int count=1;

int flag = 0;
void EXTI4_15_IRQHandler(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	if (EXTI->PR & (1 << 13))  // if the interrupt is triggered by PC13
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <EXTI4_15_IRQHandler+0x38>)
 8000226:	695a      	ldr	r2, [r3, #20]
 8000228:	2380      	movs	r3, #128	; 0x80
 800022a:	019b      	lsls	r3, r3, #6
 800022c:	4013      	ands	r3, r2
 800022e:	d010      	beq.n	8000252 <EXTI4_15_IRQHandler+0x32>
			{
		led_ON();
 8000230:	f001 f9a8 	bl	8001584 <led_ON>
		Delay1(1);
 8000234:	2001      	movs	r0, #1
 8000236:	f001 f89b 	bl	8001370 <Delay1>
		led_OFF();
 800023a:	f001 f9b1 	bl	80015a0 <led_OFF>

		EXTI->PR |= (1 << 13);
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <EXTI4_15_IRQHandler+0x38>)
 8000240:	695a      	ldr	r2, [r3, #20]
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <EXTI4_15_IRQHandler+0x38>)
 8000244:	2180      	movs	r1, #128	; 0x80
 8000246:	0189      	lsls	r1, r1, #6
 8000248:	430a      	orrs	r2, r1
 800024a:	615a      	str	r2, [r3, #20]
		flag = 1;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <EXTI4_15_IRQHandler+0x3c>)
 800024e:	2201      	movs	r2, #1
 8000250:	601a      	str	r2, [r3, #0]
	}
}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40010400 	.word	0x40010400
 800025c:	2000002c 	.word	0x2000002c

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000264:	f000 f94e 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000268:	f000 f81c 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026c:	f000 f85a 	bl	8000324 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  led_init();
 8000270:	f001 f94c 	bl	800150c <led_init>
  button_init();
 8000274:	f001 f854 	bl	8001320 <button_init>
  exti_init();
 8000278:	f001 f91c 	bl	80014b4 <exti_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led++;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <main+0x3c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	1c5a      	adds	r2, r3, #1
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <main+0x3c>)
 8000284:	601a      	str	r2, [r3, #0]
	  GPIOC->ODR ^=(1<<8);
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <main+0x40>)
 8000288:	695a      	ldr	r2, [r3, #20]
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <main+0x40>)
 800028c:	2180      	movs	r1, #128	; 0x80
 800028e:	0049      	lsls	r1, r1, #1
 8000290:	404a      	eors	r2, r1
 8000292:	615a      	str	r2, [r3, #20]
	  HAL_Delay(100);
 8000294:	2064      	movs	r0, #100	; 0x64
 8000296:	f000 f999 	bl	80005cc <HAL_Delay>
	  led++;
 800029a:	e7ef      	b.n	800027c <main+0x1c>
 800029c:	20000000 	.word	0x20000000
 80002a0:	48000800 	.word	0x48000800

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b091      	sub	sp, #68	; 0x44
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	2410      	movs	r4, #16
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	0018      	movs	r0, r3
 80002b0:	2330      	movs	r3, #48	; 0x30
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f001 f9a7 	bl	8001608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	003b      	movs	r3, r7
 80002bc:	0018      	movs	r0, r3
 80002be:	2310      	movs	r3, #16
 80002c0:	001a      	movs	r2, r3
 80002c2:	2100      	movs	r1, #0
 80002c4:	f001 f9a0 	bl	8001608 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	0021      	movs	r1, r4
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2202      	movs	r2, #2
 80002ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2201      	movs	r2, #1
 80002d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2210      	movs	r2, #16
 80002da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fbd7 	bl	8000a98 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002ee:	f000 f899 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	003b      	movs	r3, r7
 80002f4:	2207      	movs	r2, #7
 80002f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f8:	003b      	movs	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	003b      	movs	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	003b      	movs	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030a:	003b      	movs	r3, r7
 800030c:	2100      	movs	r1, #0
 800030e:	0018      	movs	r0, r3
 8000310:	f000 fee0 	bl	80010d4 <HAL_RCC_ClockConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000318:	f000 f884 	bl	8000424 <Error_Handler>
  }
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b011      	add	sp, #68	; 0x44
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b089      	sub	sp, #36	; 0x24
 8000328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	240c      	movs	r4, #12
 800032c:	193b      	adds	r3, r7, r4
 800032e:	0018      	movs	r0, r3
 8000330:	2314      	movs	r3, #20
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f001 f967 	bl	8001608 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033a:	4b38      	ldr	r3, [pc, #224]	; (800041c <MX_GPIO_Init+0xf8>)
 800033c:	695a      	ldr	r2, [r3, #20]
 800033e:	4b37      	ldr	r3, [pc, #220]	; (800041c <MX_GPIO_Init+0xf8>)
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	0309      	lsls	r1, r1, #12
 8000344:	430a      	orrs	r2, r1
 8000346:	615a      	str	r2, [r3, #20]
 8000348:	4b34      	ldr	r3, [pc, #208]	; (800041c <MX_GPIO_Init+0xf8>)
 800034a:	695a      	ldr	r2, [r3, #20]
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	031b      	lsls	r3, r3, #12
 8000350:	4013      	ands	r3, r2
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000356:	4b31      	ldr	r3, [pc, #196]	; (800041c <MX_GPIO_Init+0xf8>)
 8000358:	695a      	ldr	r2, [r3, #20]
 800035a:	4b30      	ldr	r3, [pc, #192]	; (800041c <MX_GPIO_Init+0xf8>)
 800035c:	2180      	movs	r1, #128	; 0x80
 800035e:	03c9      	lsls	r1, r1, #15
 8000360:	430a      	orrs	r2, r1
 8000362:	615a      	str	r2, [r3, #20]
 8000364:	4b2d      	ldr	r3, [pc, #180]	; (800041c <MX_GPIO_Init+0xf8>)
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	03db      	lsls	r3, r3, #15
 800036c:	4013      	ands	r3, r2
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b2a      	ldr	r3, [pc, #168]	; (800041c <MX_GPIO_Init+0xf8>)
 8000374:	695a      	ldr	r2, [r3, #20]
 8000376:	4b29      	ldr	r3, [pc, #164]	; (800041c <MX_GPIO_Init+0xf8>)
 8000378:	2180      	movs	r1, #128	; 0x80
 800037a:	0289      	lsls	r1, r1, #10
 800037c:	430a      	orrs	r2, r1
 800037e:	615a      	str	r2, [r3, #20]
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <MX_GPIO_Init+0xf8>)
 8000382:	695a      	ldr	r2, [r3, #20]
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	029b      	lsls	r3, r3, #10
 8000388:	4013      	ands	r3, r2
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800038e:	2390      	movs	r3, #144	; 0x90
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	2200      	movs	r2, #0
 8000394:	2120      	movs	r1, #32
 8000396:	0018      	movs	r0, r3
 8000398:	f000 fb60 	bl	8000a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800039c:	193b      	adds	r3, r7, r4
 800039e:	2280      	movs	r2, #128	; 0x80
 80003a0:	0192      	lsls	r2, r2, #6
 80003a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	2284      	movs	r2, #132	; 0x84
 80003a8:	0392      	lsls	r2, r2, #14
 80003aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <MX_GPIO_Init+0xfc>)
 80003b6:	0019      	movs	r1, r3
 80003b8:	0010      	movs	r0, r2
 80003ba:	f000 f9df 	bl	800077c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	220c      	movs	r2, #12
 80003c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	2202      	movs	r2, #2
 80003c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	193b      	adds	r3, r7, r4
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	2203      	movs	r2, #3
 80003d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	2201      	movs	r2, #1
 80003da:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	193a      	adds	r2, r7, r4
 80003de:	2390      	movs	r3, #144	; 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 f9c9 	bl	800077c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003ea:	0021      	movs	r1, r4
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2220      	movs	r2, #32
 80003f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2201      	movs	r2, #1
 80003f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000404:	187a      	adds	r2, r7, r1
 8000406:	2390      	movs	r3, #144	; 0x90
 8000408:	05db      	lsls	r3, r3, #23
 800040a:	0011      	movs	r1, r2
 800040c:	0018      	movs	r0, r3
 800040e:	f000 f9b5 	bl	800077c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b009      	add	sp, #36	; 0x24
 8000418:	bd90      	pop	{r4, r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000
 8000420:	48000800 	.word	0x48000800

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>
	...

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x44>)
 8000438:	699a      	ldr	r2, [r3, #24]
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <HAL_MspInit+0x44>)
 800043c:	2101      	movs	r1, #1
 800043e:	430a      	orrs	r2, r1
 8000440:	619a      	str	r2, [r3, #24]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x44>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	2201      	movs	r2, #1
 8000448:	4013      	ands	r3, r2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_MspInit+0x44>)
 8000450:	69da      	ldr	r2, [r3, #28]
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_MspInit+0x44>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0549      	lsls	r1, r1, #21
 8000458:	430a      	orrs	r2, r1
 800045a:	61da      	str	r2, [r3, #28]
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <HAL_MspInit+0x44>)
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	055b      	lsls	r3, r3, #21
 8000464:	4013      	ands	r3, r2
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800047c:	e7fe      	b.n	800047c <NMI_Handler+0x4>

0800047e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <HardFault_Handler+0x4>

08000484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000488:	46c0      	nop			; (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049c:	f000 f87a 	bl	8000594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004b4:	f7ff fff7 	bl	80004a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <LoopForever+0x6>)
  ldr r1, =_edata
 80004ba:	490d      	ldr	r1, [pc, #52]	; (80004f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004bc:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <LoopForever+0xe>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d0:	4c0a      	ldr	r4, [pc, #40]	; (80004fc <LoopForever+0x16>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004de:	f001 f86f 	bl	80015c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e2:	f7ff febd 	bl	8000260 <main>

080004e6 <LoopForever>:

LoopForever:
    b LoopForever
 80004e6:	e7fe      	b.n	80004e6 <LoopForever>
  ldr   r0, =_estack
 80004e8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80004ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80004f4:	08001668 	.word	0x08001668
  ldr r2, =_sbss
 80004f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80004fc:	20000034 	.word	0x20000034

08000500 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC1_IRQHandler>
	...

08000504 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <HAL_Init+0x24>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_Init+0x24>)
 800050e:	2110      	movs	r1, #16
 8000510:	430a      	orrs	r2, r1
 8000512:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000514:	2000      	movs	r0, #0
 8000516:	f000 f809 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051a:	f7ff ff89 	bl	8000430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800051e:	2300      	movs	r3, #0
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	40022000 	.word	0x40022000

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <HAL_InitTick+0x5c>)
 8000536:	681c      	ldr	r4, [r3, #0]
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <HAL_InitTick+0x60>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	0019      	movs	r1, r3
 800053e:	23fa      	movs	r3, #250	; 0xfa
 8000540:	0098      	lsls	r0, r3, #2
 8000542:	f7ff fde1 	bl	8000108 <__udivsi3>
 8000546:	0003      	movs	r3, r0
 8000548:	0019      	movs	r1, r3
 800054a:	0020      	movs	r0, r4
 800054c:	f7ff fddc 	bl	8000108 <__udivsi3>
 8000550:	0003      	movs	r3, r0
 8000552:	0018      	movs	r0, r3
 8000554:	f000 f905 	bl	8000762 <HAL_SYSTICK_Config>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	e00f      	b.n	8000580 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b03      	cmp	r3, #3
 8000564:	d80b      	bhi.n	800057e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	2301      	movs	r3, #1
 800056a:	425b      	negs	r3, r3
 800056c:	2200      	movs	r2, #0
 800056e:	0018      	movs	r0, r3
 8000570:	f000 f8e2 	bl	8000738 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_InitTick+0x64>)
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	0018      	movs	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	b003      	add	sp, #12
 8000586:	bd90      	pop	{r4, r7, pc}
 8000588:	20000004 	.word	0x20000004
 800058c:	2000000c 	.word	0x2000000c
 8000590:	20000008 	.word	0x20000008

08000594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_IncTick+0x1c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	001a      	movs	r2, r3
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_IncTick+0x20>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	18d2      	adds	r2, r2, r3
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_IncTick+0x20>)
 80005a6:	601a      	str	r2, [r3, #0]
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	2000000c 	.word	0x2000000c
 80005b4:	20000030 	.word	0x20000030

080005b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <HAL_GetTick+0x10>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	0018      	movs	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	20000030 	.word	0x20000030

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff fff0 	bl	80005b8 <HAL_GetTick>
 80005d8:	0003      	movs	r3, r0
 80005da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3301      	adds	r3, #1
 80005e4:	d005      	beq.n	80005f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_Delay+0x44>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	001a      	movs	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	f7ff ffe0 	bl	80005b8 <HAL_GetTick>
 80005f8:	0002      	movs	r2, r0
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8f7      	bhi.n	80005f4 <HAL_Delay+0x28>
  {
  }
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b004      	add	sp, #16
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	2000000c 	.word	0x2000000c

08000614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	0002      	movs	r2, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b7f      	cmp	r3, #127	; 0x7f
 8000628:	d828      	bhi.n	800067c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800062a:	4a2f      	ldr	r2, [pc, #188]	; (80006e8 <__NVIC_SetPriority+0xd4>)
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	089b      	lsrs	r3, r3, #2
 8000634:	33c0      	adds	r3, #192	; 0xc0
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	589b      	ldr	r3, [r3, r2]
 800063a:	1dfa      	adds	r2, r7, #7
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	0011      	movs	r1, r2
 8000640:	2203      	movs	r2, #3
 8000642:	400a      	ands	r2, r1
 8000644:	00d2      	lsls	r2, r2, #3
 8000646:	21ff      	movs	r1, #255	; 0xff
 8000648:	4091      	lsls	r1, r2
 800064a:	000a      	movs	r2, r1
 800064c:	43d2      	mvns	r2, r2
 800064e:	401a      	ands	r2, r3
 8000650:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	22ff      	movs	r2, #255	; 0xff
 8000658:	401a      	ands	r2, r3
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	0018      	movs	r0, r3
 8000660:	2303      	movs	r3, #3
 8000662:	4003      	ands	r3, r0
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000668:	481f      	ldr	r0, [pc, #124]	; (80006e8 <__NVIC_SetPriority+0xd4>)
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b25b      	sxtb	r3, r3
 8000670:	089b      	lsrs	r3, r3, #2
 8000672:	430a      	orrs	r2, r1
 8000674:	33c0      	adds	r3, #192	; 0xc0
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800067a:	e031      	b.n	80006e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <__NVIC_SetPriority+0xd8>)
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	0019      	movs	r1, r3
 8000684:	230f      	movs	r3, #15
 8000686:	400b      	ands	r3, r1
 8000688:	3b08      	subs	r3, #8
 800068a:	089b      	lsrs	r3, r3, #2
 800068c:	3306      	adds	r3, #6
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	18d3      	adds	r3, r2, r3
 8000692:	3304      	adds	r3, #4
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1dfa      	adds	r2, r7, #7
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	0011      	movs	r1, r2
 800069c:	2203      	movs	r2, #3
 800069e:	400a      	ands	r2, r1
 80006a0:	00d2      	lsls	r2, r2, #3
 80006a2:	21ff      	movs	r1, #255	; 0xff
 80006a4:	4091      	lsls	r1, r2
 80006a6:	000a      	movs	r2, r1
 80006a8:	43d2      	mvns	r2, r2
 80006aa:	401a      	ands	r2, r3
 80006ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	019b      	lsls	r3, r3, #6
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	401a      	ands	r2, r3
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	0018      	movs	r0, r3
 80006bc:	2303      	movs	r3, #3
 80006be:	4003      	ands	r3, r0
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <__NVIC_SetPriority+0xd8>)
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	001c      	movs	r4, r3
 80006cc:	230f      	movs	r3, #15
 80006ce:	4023      	ands	r3, r4
 80006d0:	3b08      	subs	r3, #8
 80006d2:	089b      	lsrs	r3, r3, #2
 80006d4:	430a      	orrs	r2, r1
 80006d6:	3306      	adds	r3, #6
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	18c3      	adds	r3, r0, r3
 80006dc:	3304      	adds	r3, #4
 80006de:	601a      	str	r2, [r3, #0]
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b003      	add	sp, #12
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	1e5a      	subs	r2, r3, #1
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	045b      	lsls	r3, r3, #17
 8000700:	429a      	cmp	r2, r3
 8000702:	d301      	bcc.n	8000708 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000704:	2301      	movs	r3, #1
 8000706:	e010      	b.n	800072a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <SysTick_Config+0x44>)
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	3a01      	subs	r2, #1
 800070e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000710:	2301      	movs	r3, #1
 8000712:	425b      	negs	r3, r3
 8000714:	2103      	movs	r1, #3
 8000716:	0018      	movs	r0, r3
 8000718:	f7ff ff7c 	bl	8000614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <SysTick_Config+0x44>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <SysTick_Config+0x44>)
 8000724:	2207      	movs	r2, #7
 8000726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000728:	2300      	movs	r3, #0
}
 800072a:	0018      	movs	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	b002      	add	sp, #8
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	e000e010 	.word	0xe000e010

08000738 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	210f      	movs	r1, #15
 8000744:	187b      	adds	r3, r7, r1
 8000746:	1c02      	adds	r2, r0, #0
 8000748:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	187b      	adds	r3, r7, r1
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b25b      	sxtb	r3, r3
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff ff5d 	bl	8000614 <__NVIC_SetPriority>
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b004      	add	sp, #16
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff ffbf 	bl	80006f0 <SysTick_Config>
 8000772:	0003      	movs	r3, r0
}
 8000774:	0018      	movs	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800078a:	e14f      	b.n	8000a2c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2101      	movs	r1, #1
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	4091      	lsls	r1, r2
 8000796:	000a      	movs	r2, r1
 8000798:	4013      	ands	r3, r2
 800079a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d100      	bne.n	80007a4 <HAL_GPIO_Init+0x28>
 80007a2:	e140      	b.n	8000a26 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2203      	movs	r2, #3
 80007aa:	4013      	ands	r3, r2
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d005      	beq.n	80007bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	2203      	movs	r2, #3
 80007b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d130      	bne.n	800081e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	2203      	movs	r2, #3
 80007c8:	409a      	lsls	r2, r3
 80007ca:	0013      	movs	r3, r2
 80007cc:	43da      	mvns	r2, r3
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	68da      	ldr	r2, [r3, #12]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	409a      	lsls	r2, r3
 80007de:	0013      	movs	r3, r2
 80007e0:	693a      	ldr	r2, [r7, #16]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007f2:	2201      	movs	r2, #1
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	409a      	lsls	r2, r3
 80007f8:	0013      	movs	r3, r2
 80007fa:	43da      	mvns	r2, r3
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4013      	ands	r3, r2
 8000800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	091b      	lsrs	r3, r3, #4
 8000808:	2201      	movs	r2, #1
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
 8000810:	0013      	movs	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	4313      	orrs	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2203      	movs	r2, #3
 8000824:	4013      	ands	r3, r2
 8000826:	2b03      	cmp	r3, #3
 8000828:	d017      	beq.n	800085a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	2203      	movs	r2, #3
 8000836:	409a      	lsls	r2, r3
 8000838:	0013      	movs	r3, r2
 800083a:	43da      	mvns	r2, r3
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	4013      	ands	r3, r2
 8000840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	409a      	lsls	r2, r3
 800084c:	0013      	movs	r3, r2
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4313      	orrs	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2203      	movs	r2, #3
 8000860:	4013      	ands	r3, r2
 8000862:	2b02      	cmp	r3, #2
 8000864:	d123      	bne.n	80008ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3208      	adds	r2, #8
 800086e:	0092      	lsls	r2, r2, #2
 8000870:	58d3      	ldr	r3, [r2, r3]
 8000872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	2207      	movs	r2, #7
 8000878:	4013      	ands	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	220f      	movs	r2, #15
 800087e:	409a      	lsls	r2, r3
 8000880:	0013      	movs	r3, r2
 8000882:	43da      	mvns	r2, r3
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	4013      	ands	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	2107      	movs	r1, #7
 8000892:	400b      	ands	r3, r1
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	409a      	lsls	r2, r3
 8000898:	0013      	movs	r3, r2
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	4313      	orrs	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	0092      	lsls	r2, r2, #2
 80008aa:	6939      	ldr	r1, [r7, #16]
 80008ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2203      	movs	r2, #3
 80008ba:	409a      	lsls	r2, r3
 80008bc:	0013      	movs	r3, r2
 80008be:	43da      	mvns	r2, r3
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	4013      	ands	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2203      	movs	r2, #3
 80008cc:	401a      	ands	r2, r3
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	409a      	lsls	r2, r3
 80008d4:	0013      	movs	r3, r2
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4313      	orrs	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	23c0      	movs	r3, #192	; 0xc0
 80008e8:	029b      	lsls	r3, r3, #10
 80008ea:	4013      	ands	r3, r2
 80008ec:	d100      	bne.n	80008f0 <HAL_GPIO_Init+0x174>
 80008ee:	e09a      	b.n	8000a26 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f0:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <HAL_GPIO_Init+0x2c8>)
 80008f2:	699a      	ldr	r2, [r3, #24]
 80008f4:	4b53      	ldr	r3, [pc, #332]	; (8000a44 <HAL_GPIO_Init+0x2c8>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	430a      	orrs	r2, r1
 80008fa:	619a      	str	r2, [r3, #24]
 80008fc:	4b51      	ldr	r3, [pc, #324]	; (8000a44 <HAL_GPIO_Init+0x2c8>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	2201      	movs	r2, #1
 8000902:	4013      	ands	r3, r2
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000908:	4a4f      	ldr	r2, [pc, #316]	; (8000a48 <HAL_GPIO_Init+0x2cc>)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	089b      	lsrs	r3, r3, #2
 800090e:	3302      	adds	r3, #2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	589b      	ldr	r3, [r3, r2]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	2203      	movs	r2, #3
 800091a:	4013      	ands	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	220f      	movs	r2, #15
 8000920:	409a      	lsls	r2, r3
 8000922:	0013      	movs	r3, r2
 8000924:	43da      	mvns	r2, r3
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	2390      	movs	r3, #144	; 0x90
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	429a      	cmp	r2, r3
 8000934:	d013      	beq.n	800095e <HAL_GPIO_Init+0x1e2>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a44      	ldr	r2, [pc, #272]	; (8000a4c <HAL_GPIO_Init+0x2d0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d00d      	beq.n	800095a <HAL_GPIO_Init+0x1de>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a43      	ldr	r2, [pc, #268]	; (8000a50 <HAL_GPIO_Init+0x2d4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d007      	beq.n	8000956 <HAL_GPIO_Init+0x1da>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a42      	ldr	r2, [pc, #264]	; (8000a54 <HAL_GPIO_Init+0x2d8>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_GPIO_Init+0x1d6>
 800094e:	2303      	movs	r3, #3
 8000950:	e006      	b.n	8000960 <HAL_GPIO_Init+0x1e4>
 8000952:	2305      	movs	r3, #5
 8000954:	e004      	b.n	8000960 <HAL_GPIO_Init+0x1e4>
 8000956:	2302      	movs	r3, #2
 8000958:	e002      	b.n	8000960 <HAL_GPIO_Init+0x1e4>
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <HAL_GPIO_Init+0x1e4>
 800095e:	2300      	movs	r3, #0
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	2103      	movs	r1, #3
 8000964:	400a      	ands	r2, r1
 8000966:	0092      	lsls	r2, r2, #2
 8000968:	4093      	lsls	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000970:	4935      	ldr	r1, [pc, #212]	; (8000a48 <HAL_GPIO_Init+0x2cc>)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	089b      	lsrs	r3, r3, #2
 8000976:	3302      	adds	r3, #2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <HAL_GPIO_Init+0x2dc>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	43da      	mvns	r2, r3
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	035b      	lsls	r3, r3, #13
 8000996:	4013      	ands	r3, r2
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <HAL_GPIO_Init+0x2dc>)
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80009a8:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <HAL_GPIO_Init+0x2dc>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	43da      	mvns	r2, r3
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	039b      	lsls	r3, r3, #14
 80009c0:	4013      	ands	r3, r2
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <HAL_GPIO_Init+0x2dc>)
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <HAL_GPIO_Init+0x2dc>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	43da      	mvns	r2, r3
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	029b      	lsls	r3, r3, #10
 80009ea:	4013      	ands	r3, r2
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_GPIO_Init+0x2dc>)
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_GPIO_Init+0x2dc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	43da      	mvns	r2, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	025b      	lsls	r3, r3, #9
 8000a14:	4013      	ands	r3, r2
 8000a16:	d003      	beq.n	8000a20 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_GPIO_Init+0x2dc>)
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	40da      	lsrs	r2, r3
 8000a34:	1e13      	subs	r3, r2, #0
 8000a36:	d000      	beq.n	8000a3a <HAL_GPIO_Init+0x2be>
 8000a38:	e6a8      	b.n	800078c <HAL_GPIO_Init+0x10>
  } 
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b006      	add	sp, #24
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010000 	.word	0x40010000
 8000a4c:	48000400 	.word	0x48000400
 8000a50:	48000800 	.word	0x48000800
 8000a54:	48000c00 	.word	0x48000c00
 8000a58:	40010400 	.word	0x40010400

08000a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	0008      	movs	r0, r1
 8000a66:	0011      	movs	r1, r2
 8000a68:	1cbb      	adds	r3, r7, #2
 8000a6a:	1c02      	adds	r2, r0, #0
 8000a6c:	801a      	strh	r2, [r3, #0]
 8000a6e:	1c7b      	adds	r3, r7, #1
 8000a70:	1c0a      	adds	r2, r1, #0
 8000a72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a74:	1c7b      	adds	r3, r7, #1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d004      	beq.n	8000a86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a7c:	1cbb      	adds	r3, r7, #2
 8000a7e:	881a      	ldrh	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a84:	e003      	b.n	8000a8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a86:	1cbb      	adds	r3, r7, #2
 8000a88:	881a      	ldrh	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e305      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d100      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x1e>
 8000ab4:	e08d      	b.n	8000bd2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ab6:	4bc5      	ldr	r3, [pc, #788]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	220c      	movs	r2, #12
 8000abc:	4013      	ands	r3, r2
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d00e      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ac2:	4bc2      	ldr	r3, [pc, #776]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	4013      	ands	r3, r2
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d116      	bne.n	8000afc <HAL_RCC_OscConfig+0x64>
 8000ace:	4bbf      	ldr	r3, [pc, #764]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	23c0      	movs	r3, #192	; 0xc0
 8000ad4:	025b      	lsls	r3, r3, #9
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	025b      	lsls	r3, r3, #9
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d10d      	bne.n	8000afc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae0:	4bba      	ldr	r3, [pc, #744]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	029b      	lsls	r3, r3, #10
 8000ae8:	4013      	ands	r3, r2
 8000aea:	d100      	bne.n	8000aee <HAL_RCC_OscConfig+0x56>
 8000aec:	e070      	b.n	8000bd0 <HAL_RCC_OscConfig+0x138>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d000      	beq.n	8000af8 <HAL_RCC_OscConfig+0x60>
 8000af6:	e06b      	b.n	8000bd0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e2dc      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d107      	bne.n	8000b14 <HAL_RCC_OscConfig+0x7c>
 8000b04:	4bb1      	ldr	r3, [pc, #708]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4bb0      	ldr	r3, [pc, #704]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	0249      	lsls	r1, r1, #9
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e02f      	b.n	8000b74 <HAL_RCC_OscConfig+0xdc>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10c      	bne.n	8000b36 <HAL_RCC_OscConfig+0x9e>
 8000b1c:	4bab      	ldr	r3, [pc, #684]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4baa      	ldr	r3, [pc, #680]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b22:	49ab      	ldr	r1, [pc, #684]	; (8000dd0 <HAL_RCC_OscConfig+0x338>)
 8000b24:	400a      	ands	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	4ba8      	ldr	r3, [pc, #672]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4ba7      	ldr	r3, [pc, #668]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b2e:	49a9      	ldr	r1, [pc, #676]	; (8000dd4 <HAL_RCC_OscConfig+0x33c>)
 8000b30:	400a      	ands	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	e01e      	b.n	8000b74 <HAL_RCC_OscConfig+0xdc>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	d10e      	bne.n	8000b5c <HAL_RCC_OscConfig+0xc4>
 8000b3e:	4ba3      	ldr	r3, [pc, #652]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4ba2      	ldr	r3, [pc, #648]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	02c9      	lsls	r1, r1, #11
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	4b9f      	ldr	r3, [pc, #636]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b9e      	ldr	r3, [pc, #632]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0249      	lsls	r1, r1, #9
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	e00b      	b.n	8000b74 <HAL_RCC_OscConfig+0xdc>
 8000b5c:	4b9b      	ldr	r3, [pc, #620]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b9a      	ldr	r3, [pc, #616]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b62:	499b      	ldr	r1, [pc, #620]	; (8000dd0 <HAL_RCC_OscConfig+0x338>)
 8000b64:	400a      	ands	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	4b98      	ldr	r3, [pc, #608]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b97      	ldr	r3, [pc, #604]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b6e:	4999      	ldr	r1, [pc, #612]	; (8000dd4 <HAL_RCC_OscConfig+0x33c>)
 8000b70:	400a      	ands	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d014      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fd1c 	bl	80005b8 <HAL_GetTick>
 8000b80:	0003      	movs	r3, r0
 8000b82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b84:	e008      	b.n	8000b98 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b86:	f7ff fd17 	bl	80005b8 <HAL_GetTick>
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	2b64      	cmp	r3, #100	; 0x64
 8000b92:	d901      	bls.n	8000b98 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000b94:	2303      	movs	r3, #3
 8000b96:	e28e      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b98:	4b8c      	ldr	r3, [pc, #560]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	029b      	lsls	r3, r3, #10
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d0f0      	beq.n	8000b86 <HAL_RCC_OscConfig+0xee>
 8000ba4:	e015      	b.n	8000bd2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fd07 	bl	80005b8 <HAL_GetTick>
 8000baa:	0003      	movs	r3, r0
 8000bac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bae:	e008      	b.n	8000bc2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb0:	f7ff fd02 	bl	80005b8 <HAL_GetTick>
 8000bb4:	0002      	movs	r2, r0
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b64      	cmp	r3, #100	; 0x64
 8000bbc:	d901      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e279      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc2:	4b82      	ldr	r3, [pc, #520]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	029b      	lsls	r3, r3, #10
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d1f0      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x118>
 8000bce:	e000      	b.n	8000bd2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	4013      	ands	r3, r2
 8000bda:	d100      	bne.n	8000bde <HAL_RCC_OscConfig+0x146>
 8000bdc:	e06c      	b.n	8000cb8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bde:	4b7b      	ldr	r3, [pc, #492]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	220c      	movs	r2, #12
 8000be4:	4013      	ands	r3, r2
 8000be6:	d00e      	beq.n	8000c06 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000be8:	4b78      	ldr	r3, [pc, #480]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	220c      	movs	r2, #12
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d11f      	bne.n	8000c34 <HAL_RCC_OscConfig+0x19c>
 8000bf4:	4b75      	ldr	r3, [pc, #468]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	23c0      	movs	r3, #192	; 0xc0
 8000bfa:	025b      	lsls	r3, r3, #9
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d116      	bne.n	8000c34 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c06:	4b71      	ldr	r3, [pc, #452]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d005      	beq.n	8000c1c <HAL_RCC_OscConfig+0x184>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d001      	beq.n	8000c1c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e24c      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c1c:	4b6b      	ldr	r3, [pc, #428]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	22f8      	movs	r2, #248	; 0xf8
 8000c22:	4393      	bics	r3, r2
 8000c24:	0019      	movs	r1, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	691b      	ldr	r3, [r3, #16]
 8000c2a:	00da      	lsls	r2, r3, #3
 8000c2c:	4b67      	ldr	r3, [pc, #412]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c32:	e041      	b.n	8000cb8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d024      	beq.n	8000c86 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c3c:	4b63      	ldr	r3, [pc, #396]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b62      	ldr	r3, [pc, #392]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000c42:	2101      	movs	r1, #1
 8000c44:	430a      	orrs	r2, r1
 8000c46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c48:	f7ff fcb6 	bl	80005b8 <HAL_GetTick>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c50:	e008      	b.n	8000c64 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c52:	f7ff fcb1 	bl	80005b8 <HAL_GetTick>
 8000c56:	0002      	movs	r2, r0
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d901      	bls.n	8000c64 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e228      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c64:	4b59      	ldr	r3, [pc, #356]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d0f1      	beq.n	8000c52 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6e:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	22f8      	movs	r2, #248	; 0xf8
 8000c74:	4393      	bics	r3, r2
 8000c76:	0019      	movs	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	00da      	lsls	r2, r3, #3
 8000c7e:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	e018      	b.n	8000cb8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c86:	4b51      	ldr	r3, [pc, #324]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	438a      	bics	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c92:	f7ff fc91 	bl	80005b8 <HAL_GetTick>
 8000c96:	0003      	movs	r3, r0
 8000c98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fc8c 	bl	80005b8 <HAL_GetTick>
 8000ca0:	0002      	movs	r2, r0
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e203      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cae:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d1f1      	bne.n	8000c9c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d036      	beq.n	8000d30 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d019      	beq.n	8000cfe <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cca:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cce:	4b3f      	ldr	r3, [pc, #252]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fc6f 	bl	80005b8 <HAL_GetTick>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce0:	f7ff fc6a 	bl	80005b8 <HAL_GetTick>
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e1e1      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf2:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d0f1      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x248>
 8000cfc:	e018      	b.n	8000d30 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cfe:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d02:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	438a      	bics	r2, r1
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d0a:	f7ff fc55 	bl	80005b8 <HAL_GetTick>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d14:	f7ff fc50 	bl	80005b8 <HAL_GetTick>
 8000d18:	0002      	movs	r2, r0
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e1c7      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d26:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d1f1      	bne.n	8000d14 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2204      	movs	r2, #4
 8000d36:	4013      	ands	r3, r2
 8000d38:	d100      	bne.n	8000d3c <HAL_RCC_OscConfig+0x2a4>
 8000d3a:	e0b5      	b.n	8000ea8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3c:	201f      	movs	r0, #31
 8000d3e:	183b      	adds	r3, r7, r0
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000d46:	69da      	ldr	r2, [r3, #28]
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	055b      	lsls	r3, r3, #21
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d110      	bne.n	8000d72 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000d52:	69da      	ldr	r2, [r3, #28]
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	0549      	lsls	r1, r1, #21
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	61da      	str	r2, [r3, #28]
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000d60:	69da      	ldr	r2, [r3, #28]
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	055b      	lsls	r3, r3, #21
 8000d66:	4013      	ands	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d6c:	183b      	adds	r3, r7, r0
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_RCC_OscConfig+0x340>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d11a      	bne.n	8000db4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_RCC_OscConfig+0x340>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_RCC_OscConfig+0x340>)
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	0049      	lsls	r1, r1, #1
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d8c:	f7ff fc14 	bl	80005b8 <HAL_GetTick>
 8000d90:	0003      	movs	r3, r0
 8000d92:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d96:	f7ff fc0f 	bl	80005b8 <HAL_GetTick>
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b64      	cmp	r3, #100	; 0x64
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e186      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_RCC_OscConfig+0x340>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	d0f0      	beq.n	8000d96 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d10f      	bne.n	8000ddc <HAL_RCC_OscConfig+0x344>
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000dbe:	6a1a      	ldr	r2, [r3, #32]
 8000dc0:	4b02      	ldr	r3, [pc, #8]	; (8000dcc <HAL_RCC_OscConfig+0x334>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	621a      	str	r2, [r3, #32]
 8000dc8:	e036      	b.n	8000e38 <HAL_RCC_OscConfig+0x3a0>
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	fffeffff 	.word	0xfffeffff
 8000dd4:	fffbffff 	.word	0xfffbffff
 8000dd8:	40007000 	.word	0x40007000
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10c      	bne.n	8000dfe <HAL_RCC_OscConfig+0x366>
 8000de4:	4bb6      	ldr	r3, [pc, #728]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000de6:	6a1a      	ldr	r2, [r3, #32]
 8000de8:	4bb5      	ldr	r3, [pc, #724]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000dea:	2101      	movs	r1, #1
 8000dec:	438a      	bics	r2, r1
 8000dee:	621a      	str	r2, [r3, #32]
 8000df0:	4bb3      	ldr	r3, [pc, #716]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000df2:	6a1a      	ldr	r2, [r3, #32]
 8000df4:	4bb2      	ldr	r3, [pc, #712]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000df6:	2104      	movs	r1, #4
 8000df8:	438a      	bics	r2, r1
 8000dfa:	621a      	str	r2, [r3, #32]
 8000dfc:	e01c      	b.n	8000e38 <HAL_RCC_OscConfig+0x3a0>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x388>
 8000e06:	4bae      	ldr	r3, [pc, #696]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e08:	6a1a      	ldr	r2, [r3, #32]
 8000e0a:	4bad      	ldr	r3, [pc, #692]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	621a      	str	r2, [r3, #32]
 8000e12:	4bab      	ldr	r3, [pc, #684]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e14:	6a1a      	ldr	r2, [r3, #32]
 8000e16:	4baa      	ldr	r3, [pc, #680]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	621a      	str	r2, [r3, #32]
 8000e1e:	e00b      	b.n	8000e38 <HAL_RCC_OscConfig+0x3a0>
 8000e20:	4ba7      	ldr	r3, [pc, #668]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e22:	6a1a      	ldr	r2, [r3, #32]
 8000e24:	4ba6      	ldr	r3, [pc, #664]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e26:	2101      	movs	r1, #1
 8000e28:	438a      	bics	r2, r1
 8000e2a:	621a      	str	r2, [r3, #32]
 8000e2c:	4ba4      	ldr	r3, [pc, #656]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e2e:	6a1a      	ldr	r2, [r3, #32]
 8000e30:	4ba3      	ldr	r3, [pc, #652]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e32:	2104      	movs	r1, #4
 8000e34:	438a      	bics	r2, r1
 8000e36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d014      	beq.n	8000e6a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e40:	f7ff fbba 	bl	80005b8 <HAL_GetTick>
 8000e44:	0003      	movs	r3, r0
 8000e46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e48:	e009      	b.n	8000e5e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fbb5 	bl	80005b8 <HAL_GetTick>
 8000e4e:	0002      	movs	r2, r0
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	4a9b      	ldr	r2, [pc, #620]	; (80010c4 <HAL_RCC_OscConfig+0x62c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e12b      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e5e:	4b98      	ldr	r3, [pc, #608]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	2202      	movs	r2, #2
 8000e64:	4013      	ands	r3, r2
 8000e66:	d0f0      	beq.n	8000e4a <HAL_RCC_OscConfig+0x3b2>
 8000e68:	e013      	b.n	8000e92 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fba5 	bl	80005b8 <HAL_GetTick>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e72:	e009      	b.n	8000e88 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e74:	f7ff fba0 	bl	80005b8 <HAL_GetTick>
 8000e78:	0002      	movs	r2, r0
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	4a91      	ldr	r2, [pc, #580]	; (80010c4 <HAL_RCC_OscConfig+0x62c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e116      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e88:	4b8d      	ldr	r3, [pc, #564]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e92:	231f      	movs	r3, #31
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d105      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9c:	4b88      	ldr	r3, [pc, #544]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000e9e:	69da      	ldr	r2, [r3, #28]
 8000ea0:	4b87      	ldr	r3, [pc, #540]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000ea2:	4989      	ldr	r1, [pc, #548]	; (80010c8 <HAL_RCC_OscConfig+0x630>)
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2210      	movs	r2, #16
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d063      	beq.n	8000f7a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d12a      	bne.n	8000f10 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eba:	4b81      	ldr	r3, [pc, #516]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ebe:	4b80      	ldr	r3, [pc, #512]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000ec6:	4b7e      	ldr	r3, [pc, #504]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eca:	4b7d      	ldr	r3, [pc, #500]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fb71 	bl	80005b8 <HAL_GetTick>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000edc:	f7ff fb6c 	bl	80005b8 <HAL_GetTick>
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e0e3      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000eee:	4b74      	ldr	r3, [pc, #464]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d0f1      	beq.n	8000edc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ef8:	4b71      	ldr	r3, [pc, #452]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000efc:	22f8      	movs	r2, #248	; 0xf8
 8000efe:	4393      	bics	r3, r2
 8000f00:	0019      	movs	r1, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	00da      	lsls	r2, r3, #3
 8000f08:	4b6d      	ldr	r3, [pc, #436]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f0e:	e034      	b.n	8000f7a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	3305      	adds	r3, #5
 8000f16:	d111      	bne.n	8000f3c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f18:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f1c:	4b68      	ldr	r3, [pc, #416]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f1e:	2104      	movs	r1, #4
 8000f20:	438a      	bics	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f24:	4b66      	ldr	r3, [pc, #408]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f28:	22f8      	movs	r2, #248	; 0xf8
 8000f2a:	4393      	bics	r3, r2
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	00da      	lsls	r2, r3, #3
 8000f34:	4b62      	ldr	r3, [pc, #392]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f36:	430a      	orrs	r2, r1
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
 8000f3a:	e01e      	b.n	8000f7a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f3c:	4b60      	ldr	r3, [pc, #384]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f40:	4b5f      	ldr	r3, [pc, #380]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f42:	2104      	movs	r1, #4
 8000f44:	430a      	orrs	r2, r1
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f48:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4c:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	438a      	bics	r2, r1
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f54:	f7ff fb30 	bl	80005b8 <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f5e:	f7ff fb2b 	bl	80005b8 <HAL_GetTick>
 8000f62:	0002      	movs	r2, r0
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e0a2      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f70:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f74:	2202      	movs	r2, #2
 8000f76:	4013      	ands	r3, r2
 8000f78:	d1f1      	bne.n	8000f5e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <HAL_RCC_OscConfig+0x4ec>
 8000f82:	e097      	b.n	80010b4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f84:	4b4e      	ldr	r3, [pc, #312]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	220c      	movs	r2, #12
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d100      	bne.n	8000f92 <HAL_RCC_OscConfig+0x4fa>
 8000f90:	e06b      	b.n	800106a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d14c      	bne.n	8001034 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f9a:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000fa0:	494a      	ldr	r1, [pc, #296]	; (80010cc <HAL_RCC_OscConfig+0x634>)
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fb07 	bl	80005b8 <HAL_GetTick>
 8000faa:	0003      	movs	r3, r0
 8000fac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb0:	f7ff fb02 	bl	80005b8 <HAL_GetTick>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e079      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc2:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	049b      	lsls	r3, r3, #18
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fce:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	4393      	bics	r3, r2
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4a3a      	ldr	r2, [pc, #232]	; (80010d0 <HAL_RCC_OscConfig+0x638>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	0019      	movs	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	0449      	lsls	r1, r1, #17
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fad5 	bl	80005b8 <HAL_GetTick>
 800100e:	0003      	movs	r3, r0
 8001010:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001014:	f7ff fad0 	bl	80005b8 <HAL_GetTick>
 8001018:	0002      	movs	r2, r0
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e047      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	049b      	lsls	r3, r3, #18
 800102e:	4013      	ands	r3, r2
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0x57c>
 8001032:	e03f      	b.n	80010b4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 800103a:	4924      	ldr	r1, [pc, #144]	; (80010cc <HAL_RCC_OscConfig+0x634>)
 800103c:	400a      	ands	r2, r1
 800103e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff faba 	bl	80005b8 <HAL_GetTick>
 8001044:	0003      	movs	r3, r0
 8001046:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff fab5 	bl	80005b8 <HAL_GetTick>
 800104e:	0002      	movs	r2, r0
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e02c      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	049b      	lsls	r3, r3, #18
 8001064:	4013      	ands	r3, r2
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x5b2>
 8001068:	e024      	b.n	80010b4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e01f      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_RCC_OscConfig+0x628>)
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	23c0      	movs	r3, #192	; 0xc0
 8001086:	025b      	lsls	r3, r3, #9
 8001088:	401a      	ands	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	429a      	cmp	r2, r3
 8001090:	d10e      	bne.n	80010b0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	220f      	movs	r2, #15
 8001096:	401a      	ands	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800109c:	429a      	cmp	r2, r3
 800109e:	d107      	bne.n	80010b0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	23f0      	movs	r3, #240	; 0xf0
 80010a4:	039b      	lsls	r3, r3, #14
 80010a6:	401a      	ands	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d001      	beq.n	80010b4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b008      	add	sp, #32
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	40021000 	.word	0x40021000
 80010c4:	00001388 	.word	0x00001388
 80010c8:	efffffff 	.word	0xefffffff
 80010cc:	feffffff 	.word	0xfeffffff
 80010d0:	ffc27fff 	.word	0xffc27fff

080010d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e0b3      	b.n	8001250 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010e8:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <HAL_RCC_ClockConfig+0x184>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2201      	movs	r2, #1
 80010ee:	4013      	ands	r3, r2
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d911      	bls.n	800111a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f6:	4b58      	ldr	r3, [pc, #352]	; (8001258 <HAL_RCC_ClockConfig+0x184>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4393      	bics	r3, r2
 80010fe:	0019      	movs	r1, r3
 8001100:	4b55      	ldr	r3, [pc, #340]	; (8001258 <HAL_RCC_ClockConfig+0x184>)
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001108:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_RCC_ClockConfig+0x184>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2201      	movs	r2, #1
 800110e:	4013      	ands	r3, r2
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d001      	beq.n	800111a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e09a      	b.n	8001250 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
 8001122:	d015      	beq.n	8001150 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	4013      	ands	r3, r2
 800112c:	d006      	beq.n	800113c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	4b4a      	ldr	r3, [pc, #296]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 8001134:	21e0      	movs	r1, #224	; 0xe0
 8001136:	00c9      	lsls	r1, r1, #3
 8001138:	430a      	orrs	r2, r1
 800113a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	22f0      	movs	r2, #240	; 0xf0
 8001142:	4393      	bics	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	4b44      	ldr	r3, [pc, #272]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 800114c:	430a      	orrs	r2, r1
 800114e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2201      	movs	r2, #1
 8001156:	4013      	ands	r3, r2
 8001158:	d040      	beq.n	80011dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b3e      	ldr	r3, [pc, #248]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	029b      	lsls	r3, r3, #10
 800116a:	4013      	ands	r3, r2
 800116c:	d114      	bne.n	8001198 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e06e      	b.n	8001250 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d107      	bne.n	800118a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	4b38      	ldr	r3, [pc, #224]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	049b      	lsls	r3, r3, #18
 8001182:	4013      	ands	r3, r2
 8001184:	d108      	bne.n	8001198 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e062      	b.n	8001250 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118a:	4b34      	ldr	r3, [pc, #208]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2202      	movs	r2, #2
 8001190:	4013      	ands	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e05b      	b.n	8001250 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2203      	movs	r2, #3
 800119e:	4393      	bics	r3, r2
 80011a0:	0019      	movs	r1, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 80011a8:	430a      	orrs	r2, r1
 80011aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ac:	f7ff fa04 	bl	80005b8 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b4:	e009      	b.n	80011ca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b6:	f7ff f9ff 	bl	80005b8 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <HAL_RCC_ClockConfig+0x18c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e042      	b.n	8001250 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	220c      	movs	r2, #12
 80011d0:	401a      	ands	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	429a      	cmp	r2, r3
 80011da:	d1ec      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_RCC_ClockConfig+0x184>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2201      	movs	r2, #1
 80011e2:	4013      	ands	r3, r2
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d211      	bcs.n	800120e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_RCC_ClockConfig+0x184>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4393      	bics	r3, r2
 80011f2:	0019      	movs	r1, r3
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_RCC_ClockConfig+0x184>)
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_RCC_ClockConfig+0x184>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2201      	movs	r2, #1
 8001202:	4013      	ands	r3, r2
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d001      	beq.n	800120e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e020      	b.n	8001250 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2204      	movs	r2, #4
 8001214:	4013      	ands	r3, r2
 8001216:	d009      	beq.n	800122c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a11      	ldr	r2, [pc, #68]	; (8001264 <HAL_RCC_ClockConfig+0x190>)
 800121e:	4013      	ands	r3, r2
 8001220:	0019      	movs	r1, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 8001228:	430a      	orrs	r2, r1
 800122a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800122c:	f000 f820 	bl	8001270 <HAL_RCC_GetSysClockFreq>
 8001230:	0001      	movs	r1, r0
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_RCC_ClockConfig+0x188>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	220f      	movs	r2, #15
 800123a:	4013      	ands	r3, r2
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_RCC_ClockConfig+0x194>)
 800123e:	5cd3      	ldrb	r3, [r2, r3]
 8001240:	000a      	movs	r2, r1
 8001242:	40da      	lsrs	r2, r3
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_RCC_ClockConfig+0x198>)
 8001246:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff f96f 	bl	800052c <HAL_InitTick>
  
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	b004      	add	sp, #16
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40022000 	.word	0x40022000
 800125c:	40021000 	.word	0x40021000
 8001260:	00001388 	.word	0x00001388
 8001264:	fffff8ff 	.word	0xfffff8ff
 8001268:	08001630 	.word	0x08001630
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_RCC_GetSysClockFreq+0xa0>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	220c      	movs	r2, #12
 8001294:	4013      	ands	r3, r2
 8001296:	2b04      	cmp	r3, #4
 8001298:	d002      	beq.n	80012a0 <HAL_RCC_GetSysClockFreq+0x30>
 800129a:	2b08      	cmp	r3, #8
 800129c:	d003      	beq.n	80012a6 <HAL_RCC_GetSysClockFreq+0x36>
 800129e:	e02e      	b.n	80012fe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012a2:	613b      	str	r3, [r7, #16]
      break;
 80012a4:	e02e      	b.n	8001304 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	220f      	movs	r2, #15
 80012ac:	4013      	ands	r3, r2
 80012ae:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <HAL_RCC_GetSysClockFreq+0xa8>)
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	220f      	movs	r2, #15
 80012ba:	4013      	ands	r3, r2
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_RCC_GetSysClockFreq+0xac>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	23c0      	movs	r3, #192	; 0xc0
 80012c6:	025b      	lsls	r3, r3, #9
 80012c8:	401a      	ands	r2, r3
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	025b      	lsls	r3, r3, #9
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d109      	bne.n	80012e6 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	480f      	ldr	r0, [pc, #60]	; (8001314 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012d6:	f7fe ff17 	bl	8000108 <__udivsi3>
 80012da:	0003      	movs	r3, r0
 80012dc:	001a      	movs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4353      	muls	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	480a      	ldr	r0, [pc, #40]	; (8001314 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012ea:	f7fe ff0d 	bl	8000108 <__udivsi3>
 80012ee:	0003      	movs	r3, r0
 80012f0:	001a      	movs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4353      	muls	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
      break;
 80012fc:	e002      	b.n	8001304 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001300:	613b      	str	r3, [r7, #16]
      break;
 8001302:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001304:	693b      	ldr	r3, [r7, #16]
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b006      	add	sp, #24
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40021000 	.word	0x40021000
 8001314:	007a1200 	.word	0x007a1200
 8001318:	08001640 	.word	0x08001640
 800131c:	08001650 	.word	0x08001650

08001320 <button_init>:
 *      Author: ataha
 */

#include "stm32f0xx_hal.h"

void button_init(void){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	  RCC->AHBENR |=(1<<19);
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <button_init+0x3c>)
 8001326:	695a      	ldr	r2, [r3, #20]
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <button_init+0x3c>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0309      	lsls	r1, r1, #12
 800132e:	430a      	orrs	r2, r1
 8001330:	615a      	str	r2, [r3, #20]

	  GPIOC->MODER &=~(1<<26);
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <button_init+0x40>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <button_init+0x40>)
 8001338:	490a      	ldr	r1, [pc, #40]	; (8001364 <button_init+0x44>)
 800133a:	400a      	ands	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
	  GPIOC->MODER &=~(1<<27);
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <button_init+0x40>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <button_init+0x40>)
 8001344:	4908      	ldr	r1, [pc, #32]	; (8001368 <button_init+0x48>)
 8001346:	400a      	ands	r2, r1
 8001348:	601a      	str	r2, [r3, #0]

	  GPIOC->PUPDR &=~((1<<26)|(1<<27));
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <button_init+0x40>)
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <button_init+0x40>)
 8001350:	4906      	ldr	r1, [pc, #24]	; (800136c <button_init+0x4c>)
 8001352:	400a      	ands	r2, r1
 8001354:	60da      	str	r2, [r3, #12]
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	48000800 	.word	0x48000800
 8001364:	fbffffff 	.word	0xfbffffff
 8001368:	f7ffffff 	.word	0xf7ffffff
 800136c:	f3ffffff 	.word	0xf3ffffff

08001370 <Delay1>:
 *  Created on: Apr 1, 2023
 *      Author: ataha
 */
#include "stdint.h"

void Delay1(uint32_t time){
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	uint32_t timetop=time*1000000;
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	000a      	movs	r2, r1
 800137c:	0152      	lsls	r2, r2, #5
 800137e:	1a52      	subs	r2, r2, r1
 8001380:	0193      	lsls	r3, r2, #6
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	185b      	adds	r3, r3, r1
 8001388:	019b      	lsls	r3, r3, #6
 800138a:	60fb      	str	r3, [r7, #12]
	while(timetop--);
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	60fa      	str	r2, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1fa      	bne.n	800138e <Delay1+0x1e>
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <__NVIC_EnableIRQ>:
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b7f      	cmp	r3, #127	; 0x7f
 80013b6:	d809      	bhi.n	80013cc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	001a      	movs	r2, r3
 80013be:	231f      	movs	r3, #31
 80013c0:	401a      	ands	r2, r3
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_EnableIRQ+0x30>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	4091      	lsls	r1, r2
 80013c8:	000a      	movs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	0002      	movs	r2, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b7f      	cmp	r3, #127	; 0x7f
 80013ec:	d828      	bhi.n	8001440 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <__NVIC_SetPriority+0xd4>)
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	33c0      	adds	r3, #192	; 0xc0
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	589b      	ldr	r3, [r3, r2]
 80013fe:	1dfa      	adds	r2, r7, #7
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	0011      	movs	r1, r2
 8001404:	2203      	movs	r2, #3
 8001406:	400a      	ands	r2, r1
 8001408:	00d2      	lsls	r2, r2, #3
 800140a:	21ff      	movs	r1, #255	; 0xff
 800140c:	4091      	lsls	r1, r2
 800140e:	000a      	movs	r2, r1
 8001410:	43d2      	mvns	r2, r2
 8001412:	401a      	ands	r2, r3
 8001414:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	019b      	lsls	r3, r3, #6
 800141a:	22ff      	movs	r2, #255	; 0xff
 800141c:	401a      	ands	r2, r3
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	0018      	movs	r0, r3
 8001424:	2303      	movs	r3, #3
 8001426:	4003      	ands	r3, r0
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <__NVIC_SetPriority+0xd4>)
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	430a      	orrs	r2, r1
 8001438:	33c0      	adds	r3, #192	; 0xc0
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	501a      	str	r2, [r3, r0]
}
 800143e:	e031      	b.n	80014a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <__NVIC_SetPriority+0xd8>)
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	0019      	movs	r1, r3
 8001448:	230f      	movs	r3, #15
 800144a:	400b      	ands	r3, r1
 800144c:	3b08      	subs	r3, #8
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3306      	adds	r3, #6
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	18d3      	adds	r3, r2, r3
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1dfa      	adds	r2, r7, #7
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	0011      	movs	r1, r2
 8001460:	2203      	movs	r2, #3
 8001462:	400a      	ands	r2, r1
 8001464:	00d2      	lsls	r2, r2, #3
 8001466:	21ff      	movs	r1, #255	; 0xff
 8001468:	4091      	lsls	r1, r2
 800146a:	000a      	movs	r2, r1
 800146c:	43d2      	mvns	r2, r2
 800146e:	401a      	ands	r2, r3
 8001470:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	019b      	lsls	r3, r3, #6
 8001476:	22ff      	movs	r2, #255	; 0xff
 8001478:	401a      	ands	r2, r3
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	0018      	movs	r0, r3
 8001480:	2303      	movs	r3, #3
 8001482:	4003      	ands	r3, r0
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <__NVIC_SetPriority+0xd8>)
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	001c      	movs	r4, r3
 8001490:	230f      	movs	r3, #15
 8001492:	4023      	ands	r3, r4
 8001494:	3b08      	subs	r3, #8
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	430a      	orrs	r2, r1
 800149a:	3306      	adds	r3, #6
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	18c3      	adds	r3, r0, r3
 80014a0:	3304      	adds	r3, #4
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b003      	add	sp, #12
 80014aa:	bd90      	pop	{r4, r7, pc}
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <exti_init>:
	GPIOC->PUPDR &=~(1<<27);
	//GPIOC->PUPDR &=~(3<<26);
}

void exti_init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0

	RCC->APB2ENR |=RCC_APB2ENR_SYSCFGEN;  // Enable SYSCNFG
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <exti_init+0x4c>)
 80014ba:	699a      	ldr	r2, [r3, #24]
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <exti_init+0x4c>)
 80014be:	2101      	movs	r1, #1
 80014c0:	430a      	orrs	r2, r1
 80014c2:	619a      	str	r2, [r3, #24]
	//SYSCFG->EXTICR[3] &=~(1<<4); // Bits[7:6:5:4] = (0:0:1:0)  -> configure EXTI4 line for PC13
	//SYSCFG->EXTICR[3] |=(1<<5);
	//SYSCFG->EXTICR[3] &=~(1<<6);
	//SYSCFG->EXTICR[3] &=~(1<<7);
	//SYSCFG->EXTICR[3] &=~(0xd<<4);
	SYSCFG->EXTICR[3] |=(0x2<<4);
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <exti_init+0x50>)
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <exti_init+0x50>)
 80014ca:	2120      	movs	r1, #32
 80014cc:	430a      	orrs	r2, r1
 80014ce:	615a      	str	r2, [r3, #20]

	EXTI->IMR |=(1<<13);  // Bit[13] = 1  --> Disable the Mask on EXTI 13
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <exti_init+0x54>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <exti_init+0x54>)
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	0189      	lsls	r1, r1, #6
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]

	//EXTI->FTSR |=(1<<13);   // Disable Falling Edge Trigger for PC13
	EXTI->RTSR |=(1<<13);
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <exti_init+0x54>)
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <exti_init+0x54>)
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	0189      	lsls	r1, r1, #6
 80014e8:	430a      	orrs	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
	NVIC_SetPriority(EXTI4_15_IRQn, 1);  // Set Priority
 80014ec:	2101      	movs	r1, #1
 80014ee:	2007      	movs	r0, #7
 80014f0:	f7ff ff72 	bl	80013d8 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI4_15_IRQn);  // Enable Interrupt
 80014f4:	2007      	movs	r0, #7
 80014f6:	f7ff ff55 	bl	80013a4 <__NVIC_EnableIRQ>
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000
 8001508:	40010400 	.word	0x40010400

0800150c <led_init>:
 *  Created on: Mar 30, 2023
 *      Author: ataha
 */
#include "stm32f0xx_hal.h"

void led_init(void){
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	  RCC->AHBENR |=(1<<19);
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <led_init+0x64>)
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <led_init+0x64>)
 8001516:	2180      	movs	r1, #128	; 0x80
 8001518:	0309      	lsls	r1, r1, #12
 800151a:	430a      	orrs	r2, r1
 800151c:	615a      	str	r2, [r3, #20]

	  GPIOC->MODER |=(1<<16);
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <led_init+0x68>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <led_init+0x68>)
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	0249      	lsls	r1, r1, #9
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
	  GPIOC->MODER &=~(1<<17);
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <led_init+0x68>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <led_init+0x68>)
 8001532:	4911      	ldr	r1, [pc, #68]	; (8001578 <led_init+0x6c>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
	  GPIOC->OTYPER &=~(1<<8);
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <led_init+0x68>)
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <led_init+0x68>)
 800153e:	490f      	ldr	r1, [pc, #60]	; (800157c <led_init+0x70>)
 8001540:	400a      	ands	r2, r1
 8001542:	605a      	str	r2, [r3, #4]
	  GPIOC->OSPEEDR |=(1<<16);
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <led_init+0x68>)
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <led_init+0x68>)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	0249      	lsls	r1, r1, #9
 800154e:	430a      	orrs	r2, r1
 8001550:	609a      	str	r2, [r3, #8]
	  GPIOC->OSPEEDR &=~(1<<17);
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <led_init+0x68>)
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <led_init+0x68>)
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <led_init+0x6c>)
 800155a:	400a      	ands	r2, r1
 800155c:	609a      	str	r2, [r3, #8]
	  GPIOC->PUPDR &=~((1<<16)|(1<<17));
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <led_init+0x68>)
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <led_init+0x68>)
 8001564:	4906      	ldr	r1, [pc, #24]	; (8001580 <led_init+0x74>)
 8001566:	400a      	ands	r2, r1
 8001568:	60da      	str	r2, [r3, #12]
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000
 8001574:	48000800 	.word	0x48000800
 8001578:	fffdffff 	.word	0xfffdffff
 800157c:	fffffeff 	.word	0xfffffeff
 8001580:	fffcffff 	.word	0xfffcffff

08001584 <led_ON>:
void led_ON (void){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	GPIOC->ODR |=(1<<8);
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <led_ON+0x18>)
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <led_ON+0x18>)
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	0049      	lsls	r1, r1, #1
 8001592:	430a      	orrs	r2, r1
 8001594:	615a      	str	r2, [r3, #20]
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	48000800 	.word	0x48000800

080015a0 <led_OFF>:

void led_OFF (void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	GPIOC->ODR &=~(1<<8);
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <led_OFF+0x18>)
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <led_OFF+0x18>)
 80015aa:	4904      	ldr	r1, [pc, #16]	; (80015bc <led_OFF+0x1c>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	615a      	str	r2, [r3, #20]
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	48000800 	.word	0x48000800
 80015bc:	fffffeff 	.word	0xfffffeff

080015c0 <__libc_init_array>:
 80015c0:	b570      	push	{r4, r5, r6, lr}
 80015c2:	2600      	movs	r6, #0
 80015c4:	4d0c      	ldr	r5, [pc, #48]	; (80015f8 <__libc_init_array+0x38>)
 80015c6:	4c0d      	ldr	r4, [pc, #52]	; (80015fc <__libc_init_array+0x3c>)
 80015c8:	1b64      	subs	r4, r4, r5
 80015ca:	10a4      	asrs	r4, r4, #2
 80015cc:	42a6      	cmp	r6, r4
 80015ce:	d109      	bne.n	80015e4 <__libc_init_array+0x24>
 80015d0:	2600      	movs	r6, #0
 80015d2:	f000 f821 	bl	8001618 <_init>
 80015d6:	4d0a      	ldr	r5, [pc, #40]	; (8001600 <__libc_init_array+0x40>)
 80015d8:	4c0a      	ldr	r4, [pc, #40]	; (8001604 <__libc_init_array+0x44>)
 80015da:	1b64      	subs	r4, r4, r5
 80015dc:	10a4      	asrs	r4, r4, #2
 80015de:	42a6      	cmp	r6, r4
 80015e0:	d105      	bne.n	80015ee <__libc_init_array+0x2e>
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
 80015e4:	00b3      	lsls	r3, r6, #2
 80015e6:	58eb      	ldr	r3, [r5, r3]
 80015e8:	4798      	blx	r3
 80015ea:	3601      	adds	r6, #1
 80015ec:	e7ee      	b.n	80015cc <__libc_init_array+0xc>
 80015ee:	00b3      	lsls	r3, r6, #2
 80015f0:	58eb      	ldr	r3, [r5, r3]
 80015f2:	4798      	blx	r3
 80015f4:	3601      	adds	r6, #1
 80015f6:	e7f2      	b.n	80015de <__libc_init_array+0x1e>
 80015f8:	08001660 	.word	0x08001660
 80015fc:	08001660 	.word	0x08001660
 8001600:	08001660 	.word	0x08001660
 8001604:	08001664 	.word	0x08001664

08001608 <memset>:
 8001608:	0003      	movs	r3, r0
 800160a:	1882      	adds	r2, r0, r2
 800160c:	4293      	cmp	r3, r2
 800160e:	d100      	bne.n	8001612 <memset+0xa>
 8001610:	4770      	bx	lr
 8001612:	7019      	strb	r1, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	e7f9      	b.n	800160c <memset+0x4>

08001618 <_init>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161e:	bc08      	pop	{r3}
 8001620:	469e      	mov	lr, r3
 8001622:	4770      	bx	lr

08001624 <_fini>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162a:	bc08      	pop	{r3}
 800162c:	469e      	mov	lr, r3
 800162e:	4770      	bx	lr
